문제1. 퀵정렬 코드에 key라는 키워드 파라미터를 추가 (6점)
원하는 기준대로 정렬될 수 있게 퀵정렬 코드를 일반화하여 수정하라.
방식은 반드시 파이썬3 표준라이브러리의 sort나 min, max 함수에서 활용하는 key 파라미터와 같은 방식으로 처리해야 함.
참고로 key의 기본값은 lambda x:x이다.

# 여기 코드에서 key를 적절히 활용하도록 수정
def quicksort(xs, key=(lambda x:x)):
    if len(xs) > 1:
        pivot = xs[0]
        (left, right) = partition(pivot, xs[1:], key=key)
        
        return quicksort(left, key) + [pivot] + quicksort(right, key)
    else:
        return xs

# partition은 list comprehension으로 작성 (교재 코드에 비해 2배로 연산을 많이 함)
def partition(pivot, xs, key):
    left  = [x for x in xs if key(x) <= key(pivot)]
    right = [x for x in xs if key(x) >  key(pivot)]
    return (left, right)

lam = lambda x: 0 if type(x) != list else 1+ max(map(lam, x))

quicksort([3,5,8,4,2,1,9,5,7])
quicksort(['hello', 'worlds', 'hi', 'won'])
quicksort(['hello', 'worlds', 'hi', 'won'], len) # ['hi', 'won','hello','worlds'] 가 결과로 나와야 함



문제2. (이름, 나이, 성적)의 크기 3인 튜플로 이루어진 리스트 정렬 (6점)
이름은 문자열이고 나이와 성적은 정수로 나타낸다.
성적이 높은 경우가 가장 앞으로(왼쪽으로) 오도록 정렬
성적이 동점이면 나이가 적은 사람이 앞으로 오도록 정렬
성적도 나이도 같은 경우는 이름 가나다순(사전순)이 되도록 정렬
문제1에서 작성한 퀵소트를 이용해 위와 같은 기준으로 정렬하는 테스트를 2개 이상 작성해 보라.

quicksort([('kim', 22, 90), ('lee', 22, 90), ('park', 24, 90), ('choi', 22, 97), ('jung', 23, 88)], key=lambda x: (-x[2], x[1], x[0]) )
quicksort([('han', 24, 90), ('jeon', 24, 94), ('baek', 24, 90), ('ryu', 22, 97), ('nam', 23, 90)], key=lambda x: (-x[2], x[1], x[0]) )


문제3. 문자열과 정수가 섞여 있는 리스트에서 정렬 (9점)
정수가 문자열보다 항상 앞으로 오도록 정렬하는 테스트를 2개 이상 작성하라.
단, 정수들끼리는 큰 숫자가 앞으로(왼쪽으로) 오도록 하고 문자열끼리는 기본 순서인 사전순으로 정렬되도록 하라.
문제1에서 작성한 퀵소트를 이용해 위와 같은 기준으로 정렬하는 테스트를 2개 이상 작성해 보라.

quicksort([1,2,'apple',4,'mango',5,'orange',6,'banna'], key=lambda x: -x if type(x)==int else ord(x[0]))
quicksort([-1,-2,'phone',-4,'mouse',-5,'keyboard',-6,'desk'], key=lambda x: -x if type(x)==int else ord(x[0]))




문제4. 문자열과 정수가 섞여 있는 리스트에서 정렬 (15점)
문자열이 정수보다 항상 앞으로 오도록 정렬하는 테스트를 2개 이상 작성하라.
단, 정수들끼리는 기본 순서인 작은 숫자가 앞으로 오도록 하고 문자열끼리는 기본 순서와 반대로 사전 역순으로 정렬되도록 하라.
문제1에서 작성한 퀵소트를 이용해 위와 같은 기준으로 정렬하는 테스트를 2개 이상 작성해 보라.

quicksort([1,2,'apple',4,'mango',5,'orange',6,'banna'], key=lambda x: x if type(x)==int else -ord(x))
quicksort([-1,-2,'phone',-4,'mouse',-5,'keyboard',-6,'desk'], key=lambda x: x if type(x)==int else -ord(x[0]))




문제5. 다중 리스트로 이루어진 리스트의 정렬 (20점)
정수의 다중 리스트를 생각해 보자. 단, 빈 리스트는 고려하지 않는다.
0차원: 정수
1차원: [1, 2, 3],
2차원: [[1,2], [3]], [ [1,2], 3 ], [ 1, 2, [3]]
3차원: [ [[1,2],[3]], [[4],[5]] ], [ 1, [2,3], [[4],[5]] ]
...
즉 원소 중에서 가장 높은 차원이 n이라면 그런 원소를 포함하는 리스트는 n+1차원이다.
차원이 낮은 리스트가 앞쪽으로 오도록 정렬하라.
같은 차원끼리는 순서가 어떻게 되든지 관계없다.
대략 [ 5, 1, 3, [1,2,3], [1,[2,3]], [ [[4],[5]], [6] ], ... ] 이런 식으로 정렬되게
문제1에서 작성한 퀵소트를 이용해 위와 같은 기준으로 정렬하는 테스트를 2개 이상 작성해 보라.

#lam = lambda x: 0 if type(x) != list else 1+ max(map(lam, x))
quicksort([[[[2],[3]],[4]], 5, [1,2,3], [ 1, [2,3], [[4],[5]] ], [1,[2],3], [1,[2,3]], 3], key=lam)
#lam = lambda x: 0 if type(x) != list else 1+ max(map(lam, x))
quicksort([2, [ [[1,2],[3]], [[4],[5]] ], 6, [1,[2],3], 4, [1,[2,3]], [4,5,6]], key=lam)
quicksort([[[[2],[3]],[4]], 5, [1,2,3], [ 1, [2,3], [[4],[5]] ], [1,[2],3], [1,[2,3]], 3], key=(lam = lambda x: 0 if type(x) != list else 1+ max(map(lam, x)) ))
